<div id="karma_graph"></div>

<style>
  path {
    <% if @posneg == 'positive' %>
  		stroke: #29d045;
    <% else %>
      stroke: #dc1e10;
    <% end %>
  	stroke-width: 2;
  	fill: none;
  }
</style>

<% if @karma_dataset %>
	<script>
    var dataset = Array();
    <%
    @karma_dataset.each do |b|
      %>
      dataset.push(<%= b %>);
      <%
    end
    %>
    
/*     console.log(dataset); */
	
		/* implementation heavily influenced by http://bl.ocks.org/1166403 */
		
		// define dimensions of graph
    var padding = 1;
    <% if request.user_agent.include?("iPhone") %>
      var w = 80;
    <% else %>
      var w = 170;
    <% end %>
		var h = 35; // height
		
		// create a simple data array that we'll plot with a line (this array represents only the Y values, X will just be the index location)
		var data = [3, 6, 2, 7, 5, 2, 0, 3, 8, 9, 2, 5, 9, 3, 6, 3, 6, 2, 7, 5, 2];
		
		data = dataset
    
    // Scales
		var x = d3.scale.linear()
		  .domain([0, data.length])
		  .range([0 - padding, w + padding]);
		  
		var y = d3.scale.linear()
      .domain([
        d3.min(data, 
          function(d) {
            return d;
          }
        ), 
        d3.max(data, 
          function(d) { 
            return d;
          }
        )])
		  .range([h - padding, 0 + padding]);
		  

			// automatically determining max range can work something like this
			// var y = d3.scale.linear().domain([0, d3.max(data)]).range([h, 0]);

		// create a line function that can convert data[] into x and y points
		var line = d3.svg.line()
			.x(function(d,i) { 
				return x(i); 
			})
			.y(function(d) { 
				return y(d); 
			})

			// Add an SVG element with the desired dimensions and margin.
			var graph = d3.select("#karma_graph").append("svg:svg")
			      .attr("width", w)
			      .attr("height", h);
			      			
  // Add the line
	graph.append("svg:path").attr("d", line(data));

</script>
<% end %>
